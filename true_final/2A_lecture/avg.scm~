(define (average-damp f)
  (define (avg a b)
    (/ (+ a b) 2))
  (lambda(x) (avg x (f x))))

(define (sqrt-1 x)
  (define (abs a)
    (if (< a 0)
	(- a)
	a))
  (define (square a)
    (* a a))
  (define (good-enough? g)
    (< (abs (- x (square g))) 0.0001))
  (define (improve g)
    ((average-damp (lambda(a) (/ x a))) g))
  (define (try g)
    (if (good-enough? g)
	g
	(try (improve g))))
  (try 1))

(sqrt-1 4)

(define (sum a b)
  (define (iter x y count)
    (if (> x y)
	count
	(iter (1+ x) y (+ count x))))
  (iter a b 0))

(sum 0 5)

(define (generic-sum a b term next)
  (define (iter x y val)
    (if (> x y)
	val
	(iter (next x) y (+ val (term x)))))
  (iter a b 0))

(define (sum-int a b)
  (generic-sum a b (lambda(x) (1+ x)) (lambda(x) x)))

(sum-int 0 5)
      
